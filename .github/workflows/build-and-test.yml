name: Build and Test ICU4C with Zig

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:


jobs:
  build-library:
    name: Build library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Setup
        run: |
            sudo apt-get update -qq
            sudo apt-get install -y \
              bash        \
              curl        \
              file        \
              jq          \
              less        \
              man         \
              manpages    \
              nano        \
              python3     \
              python3-pip \
              sudo        \
              tree        \
              unzip       \
              wget        \
              xmlstarlet  \
              zip

            chmod +x *.sh
            echo 
            echo "./init-setup.sh"
            ./init-setup.sh

      - name: Inspace build
        run: |
            tree -L 3 build

      - name: Build the library
        run: |
            echo "./build.sh $(pwd)"
            ./build.sh --workdir $(pwd)
      - name: Inspace target
        run: |
            echo "tree -L 3 build/icu4c-target"
            tree -L 3 build/icu4c-target

      - name: Package
        run: |
            echo "./package.sh $(pwd)"
            ./package.sh $(pwd)

      - name: Inspect dist
        run: |
            echo "tree -L 3 dist/icu4c-library"
            tree -L 3 dist/icu4c-library

      - name: Upload libray artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-library
          path: dist/icu4c-library
          if-no-files-found: error
          retention-days: 1

  # Build Test
  build-test:
    name: Build Test
    needs: build-library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-library
          path: tests/icu4c-library

      - name: Show tree
        run: tree

      - name: Setup
        run: ./install-zig.sh

      - name: Build test
        run: |
          pushd tests
          chmod +x *.sh
          ./compile-simple-test-all.sh
          popd

      - name: Show tree tests
        run: tree tests

      - name: Upload test program
        uses: actions/upload-artifact@v4
        with:
          name: tests-dist
          path: tests/dist
          if-no-files-found: error
          retention-days: 1

  # Run Test - Linux x86
  run-test-linux-x86:
    name: Run Test Linux x86
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tests-dist
          path: dist

      - name: Run on Linux X86-64
        run: |
          ls -la ./dist
          chmod +x ./dist/simple-test-x86_64-linux
          ./dist/simple-test-x86_64-linux

  # Run Test - Linux ARM64
  run-test-linux-arm64:
    name: Run Test Linux ARM64
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tests-dist
          path: dist

      - name: Run on Linux ARM-64
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            ls -la ./dist
            chmod +x ./dist/simple-test-arm_64-linux
            ./dist/simple-test-arm_64-linux
  
  # Run Test - macOS x86_64 (Intel)
  run-test-macos-x86:
    name: Run Test macOS x86_64
    needs: build-test
    runs-on: macos-13   # Intel runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tests-dist
          path: dist

      - name: Sanity check files
        run: |
          ls -la dist
          file dist/simple-test-x86_64-macos || true

      - name: Run on macOS x86_64
        run: |
          chmod +x dist/simple-test-x86_64-macos
          ./dist/simple-test-x86_64-macos

  # Run Test - macOS arm64 (Apple Silicon)
  run-test-macos-arm64:
    name: Run Test macOS arm_64
    needs: build-test
    runs-on: macos-15   # Apple Silicon runner (macos-latest is also Apple Silicon)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tests-dist
          path: dist

      - name: Sanity check files
        run: |
          ls -la dist
          file dist/simple-test-arm_64-macos || true

      - name: Run on macOS arm_64
        run: |
          chmod +x dist/simple-test-arm_64-macos
          ./dist/simple-test-arm_64-macos
  
  # Run Test - Windows x86_64
  run-test-windows-x86:
    name: Run Test Windows x86_64
    needs: build-test
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tests-dist
          path: dist

      - name: Sanity check files
        shell: pwsh
        run: |
          dir dist
          Get-Item dist\simple-test-x86_64-windows.exe | Format-List

      - name: Run on Windows x86_64
        shell: pwsh
        run: |
          & .\dist\simple-test-x86_64-windows.exe

  # "Run" Test - Windows arm64 (verify PE machine = ARM64)
  run-test-windows-arm64:
    name: Verify Test Windows arm_64 (PE header)
    needs: build-test
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tests-dist
          path: dist

      - name: Verify ARM64 PE header
        shell: pwsh
        run: |
          $path = "dist\simple-test-arm_64-windows.exe"
          if (!(Test-Path $path)) { Write-Error "Missing $path"; exit 1 }

          # Parse PE header to read Machine field
          $fs = [System.IO.File]::OpenRead($path)
          $br = New-Object System.IO.BinaryReader($fs)
          $fs.Seek(0x3C, 'Begin') | Out-Null
          $peoff = $br.ReadInt32()
          $fs.Seek($peoff + 4, 'Begin') | Out-Null   # skip "PE\0\0"
          $machine = $br.ReadUInt16()
          $fs.Close()

          $hex = '{0:X4}' -f $machine
          Write-Host "PE Machine: 0x$hex (expect 0xAA64 for ARM64)"
          if ($machine -ne 0xAA64) {
            Write-Error "Not ARM64 (0xAA64). Got 0x$hex"
            exit 1
          }

          # Optional: check PDB presence (kept or stripped)
          if (Test-Path "${path}.pdb") {
            Write-Host "Found symbols: ${path}.pdb"
          } else {
            Write-Host "No PDB found (that's fine)."
          }
